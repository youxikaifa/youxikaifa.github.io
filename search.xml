<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Android BLE 连接及数据传输实践</title>
      <link href="/2018/02/25/Android-BLE/"/>
      <content type="html"><![CDATA[<p>本文将展开对蓝牙低功耗从扫描蓝牙设备，建立连接到蓝牙数据通信的详细介绍，以及详细介绍<a href="https://www.race604.com/gatt-profile-intro/" target="_blank" rel="noopener">GATT Profile</a>(Generic Attribute Profile，通用属性协议)的组成结构。</p><h4 id="权限和feature"><a href="#权限和feature" class="headerlink" title="权限和feature"></a>权限和feature</h4><p>  和经典蓝牙一样，使用低功耗蓝牙，需要声明BLUETOOTH权限，如果需要扫描设备或者操作蓝牙设置，则还需要BLUETOOTH_ADMIN权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>除了蓝牙权限外，如果需要BLE feature则还需要声明uses-feature：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-feature android:name=&quot;android.hardware.bluetooth_le&quot; android:required=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><p>当required为true时，则应用只能在支持BLE的Android设备上安装运行；required为false时，Android设备均可正常安装运行，需要在代码中判断设备是否支持BLE feature：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) &#123;</span><br><span class="line">  Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show();</span><br><span class="line">  finish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建BLE"><a href="#创建BLE" class="headerlink" title="创建BLE"></a>创建BLE</h4><p>在应用可以通过 BLE 交互之前, 你需要验证设备是否支持 BLE 功能, 如果支持, 确定它是可以使用的. 这个检查只有在 下面的配置 设置为 false 时才是必须的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-feature android:name=&quot;android.hardware.bluetooth_le&quot; android:required=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="获取蓝牙适配器（BluetoothAdapter）"><a href="#获取蓝牙适配器（BluetoothAdapter）" class="headerlink" title="获取蓝牙适配器（BluetoothAdapter）"></a>获取蓝牙适配器（BluetoothAdapter）</h4><p>所有的蓝牙活动都需要 BluetoothAdapter, BluetoothAdapter 代表了设备本身的蓝牙适配器 (蓝牙无线设备). 整个系统中只有一个 蓝牙适配器, 应用可以使用 BluetoothAdapter 对象与 蓝牙适配器硬件进行交互.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Initializes a Bluetooth adapter.  For API level 18 and above, get a reference to</span><br><span class="line">// BluetoothAdapter through BluetoothManager.</span><br><span class="line">final BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);</span><br><span class="line">mBluetoothAdapter = bluetoothManager.getAdapter();</span><br></pre></td></tr></table></figure></p><h4 id="打开蓝牙功能"><a href="#打开蓝牙功能" class="headerlink" title="打开蓝牙功能"></a>打开蓝牙功能</h4><p>  为了保证 蓝牙功能是打开的, 调用 BluetoothAdapter 的 isEnable() 方法, 检查蓝牙在当前是否可用. 如果返回 false, 说明当前蓝牙不可用.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 确认当前设备的蓝牙是否可用,   </span><br><span class="line">// 如果不可用, 弹出一个对话框, 请求打开设备的蓝牙模块  </span><br><span class="line">if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) &#123;  </span><br><span class="line">    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  </span><br><span class="line">    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找设备"><a href="#查找设备" class="headerlink" title="查找设备"></a>查找设备</h4><p>搜索 BLE 设备, 调用 BluetoothAdapter 的 startLeScan() 方法, 该方法需要一个 BluetoothAdapter.LeScanCallback 类型的参数. 你必须实现这个 LeScanCallback 接口, 因为 BLE 蓝牙设备扫描结果在这个接口中返回.蓝牙搜索是一个耗电的操作，因此蓝牙搜索提供了两种搜索模式：<br><em>中断搜索</em>：一搜索到设备就中断搜索<br><em>不循环搜索</em>：给搜索设置一个合适的扫描周期</p><p>扫描设备：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void scanLeDevice(final boolean enable) &#123;</span><br><span class="line">        if (enable) &#123;</span><br><span class="line">            // Stops scanning after a pre-defined scan period.</span><br><span class="line">            mHandler.postDelayed(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    isScanned = false;</span><br><span class="line">                    refreshLayout.setRefreshing(false);</span><br><span class="line">                    mBluetoothAdapter.stopLeScan(mLeScanCallback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, SCAN_PERIOD);</span><br><span class="line"></span><br><span class="line">            isScanned = true;</span><br><span class="line">            mBluetoothAdapter.startLeScan(mLeScanCallback);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (refreshLayout.isRefreshing())&#123;</span><br><span class="line">                refreshLayout.setRefreshing(false);</span><br><span class="line">            &#125;</span><br><span class="line">            isScanned = false;</span><br><span class="line">            mBluetoothAdapter.stopLeScan(mLeScanCallback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回调代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private final LeScanCallback mLeScanCallback = new LeScanCallback() &#123;</span><br><span class="line"></span><br><span class="line">       public void onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord) &#123;</span><br><span class="line">           runOnUiThread(new Runnable() &#123;</span><br><span class="line">               public void run() &#123;</span><br><span class="line">                   if (!devices.contains(device))&#123;</span><br><span class="line">                       devices.add(device);</span><br><span class="line">                       adapter.notifyDataSetChanged();</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></p><h4 id="查找特定设备"><a href="#查找特定设备" class="headerlink" title="查找特定设备"></a>查找特定设备</h4><p>查找特定类型的外围设备, 可以调用下面的方法, 这个方法需要提供一个 UUID 对象数组, 这个 UUID 数组是 APP 支持的 GATT 服务的特殊标识.</p><p><code>startLeScan(UUID[], BluetoothAdapter.LeScanCallback)</code></p><h4 id="连接到GATT服务"><a href="#连接到GATT服务" class="headerlink" title="连接到GATT服务"></a>连接到GATT服务</h4><p>调用 BluetoothDevice 的 connectGatt() 方法可以连接到 BLE 设备的 GATT 服务. 参数一 Context 上下文对象, 参数二 boolean autoConnect 是否自动连接扫描到的蓝牙设备, 参数三 BluetoothGattCallback 接口实现类. </p><p><code>mBluetoothGatt = device.connectGatt(this, false, mGattCallback);</code></p><h4 id="GATT数据交互"><a href="#GATT数据交互" class="headerlink" title="GATT数据交互"></a>GATT数据交互</h4><p>这段代码的本质就是 BLE 设备的 GATT 服务 与 Android 的 BLE API 进行交流. 当一个特定的回调被触发, 它调用适当的 broadcastUpdate() 帮助方法, 将其当做一个 Action 操作传递出去.   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Implements callback methods for GATT events that the app cares about.</span><br><span class="line">     * For example,connection change and services discovered.</span><br><span class="line">     */</span><br><span class="line">    private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) &#123;</span><br><span class="line">            String intentAction;</span><br><span class="line">            if (newState == BluetoothProfile.STATE_CONNECTED) &#123;</span><br><span class="line">                intentAction = ACTION_GATT_CONNECTED;</span><br><span class="line">                broadcastUpdate(intentAction);</span><br><span class="line">                Log.i(TAG, &quot;Connected to GATT server.&quot;);</span><br><span class="line">                // Attempts to discover services after successful connection.</span><br><span class="line">                Log.i(TAG, &quot;Attempting to start service discovery:&quot; + mBluetoothGatt.discoverServices());</span><br><span class="line"></span><br><span class="line">            &#125; else if (newState == BluetoothProfile.STATE_DISCONNECTED) &#123;</span><br><span class="line">                intentAction = ACTION_GATT_DISCONNECTED;</span><br><span class="line">                Log.i(TAG, &quot;Disconnected from GATT server.&quot;);</span><br><span class="line">                broadcastUpdate(intentAction);</span><br><span class="line">            &#125;else if (newState == BluetoothProfile.STATE_CONNECTING)&#123;</span><br><span class="line">                intentAction = ACTION_GATT_CONNECTING;</span><br><span class="line">                Log.i(TAG, &quot;connecting from GATT server.&quot;);</span><br><span class="line">                broadcastUpdate(intentAction);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                intentAction = ACTION_GATT_DISCONNECTING;</span><br><span class="line">                Log.i(TAG, &quot;Disconnecting from GATT server.&quot;);</span><br><span class="line">                broadcastUpdate(intentAction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="读取-BLE-属性"><a href="#读取-BLE-属性" class="headerlink" title="读取 BLE 属性"></a>读取 BLE 属性</h4><p>到了这里我就要详细的讲解一下BLE GATT PROFILE的组织结构了。每个蓝牙设备都有一个Profile（就把这个Profile想象成是一个蓝牙模块），每个Profile有多个service（服务）如电量信息服务、系统信息服务等，每个service有多个Characteristic（特征），每个特征里面包括属性（properties）和值（value）和若干个descriptor（描述符）。我们刚才提到的service和characteristic，都需要一个唯一的uuid来标识，如图：<br><img src="https://github.com/youxikaifa/jianshuRes/blob/master/Android%20BLE%20%E8%BF%9E%E6%8E%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E8%AF%A6%E8%A7%A3/gatt.png?raw=true" alt="Gatt组织结构"><br>Android 应用连接到了 设备中的 GATT 服务, 并且发现了 各种服务 (特征集合), 可以读写其中的属性,遍历服务 (特征集合) 和 特征, 将其展示在 UI 界面中.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 遍历 GATT 服务  </span><br><span class="line">       for (BluetoothGattService gattService : gattServices) &#123;  </span><br><span class="line">           HashMap&lt;String, String&gt; currentServiceData =  </span><br><span class="line">                   new HashMap&lt;String, String&gt;();  </span><br><span class="line">           uuid = gattService.getUuid().toString();  </span><br><span class="line">           currentServiceData.put(  </span><br><span class="line">                   LIST_NAME, SampleGattAttributes.  </span><br><span class="line">                           lookup(uuid, unknownServiceString));  </span><br><span class="line">           currentServiceData.put(LIST_UUID, uuid);  </span><br><span class="line">           gattServiceData.add(currentServiceData);  </span><br><span class="line"> </span><br><span class="line">           ArrayList&lt;HashMap&lt;String, String&gt;&gt; gattCharacteristicGroupData =  </span><br><span class="line">                   new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();  </span><br><span class="line">                     </span><br><span class="line">           // 获取服务中的特征集合  </span><br><span class="line">           List&lt;BluetoothGattCharacteristic&gt; gattCharacteristics =  </span><br><span class="line">                   gattService.getCharacteristics();  </span><br><span class="line">           ArrayList&lt;BluetoothGattCharacteristic&gt; charas =  </span><br><span class="line">                   new ArrayList&lt;BluetoothGattCharacteristic&gt;();  </span><br><span class="line">                     </span><br><span class="line">          // 循环遍历特征集合  </span><br><span class="line">           for (BluetoothGattCharacteristic gattCharacteristic :  </span><br><span class="line">                   gattCharacteristics) &#123;  </span><br><span class="line">               charas.add(gattCharacteristic);  </span><br><span class="line">               HashMap&lt;String, String&gt; currentCharaData =  </span><br><span class="line">                       new HashMap&lt;String, String&gt;();  </span><br><span class="line">               uuid = gattCharacteristic.getUuid().toString();  </span><br><span class="line">               currentCharaData.put(  </span><br><span class="line">                       LIST_NAME, SampleGattAttributes.lookup(uuid,  </span><br><span class="line">                               unknownCharaString));  </span><br><span class="line">               currentCharaData.put(LIST_UUID, uuid);  </span><br><span class="line">               gattCharacteristicGroupData.add(currentCharaData);  </span><br><span class="line">           &#125;  </span><br><span class="line">           mGattCharacteristics.add(charas);  </span><br><span class="line">           gattCharacteristicData.add(gattCharacteristicGroupData);  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>########## 接收GATT通知<br>当 BLE 设备中的一些特殊的特征改变, 需要通知与之连接的 Android BLE 应用，使用 setCharacteristicNotification() 方法为特征设置通知.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private BluetoothGatt mBluetoothGatt;  </span><br><span class="line">BluetoothGattCharacteristic characteristic;  </span><br><span class="line">boolean enabled;  </span><br><span class="line">...  </span><br><span class="line">// 设置是否监听某个特征改变  </span><br><span class="line">mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);  </span><br><span class="line">...  </span><br><span class="line">BluetoothGattDescriptor descriptor = characteristic.getDescriptor(  </span><br><span class="line">        UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));  </span><br><span class="line">descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);  </span><br><span class="line">mBluetoothGatt.writeDescriptor(descriptor);</span><br></pre></td></tr></table></figure><p>一旦特征开启了改变通知监听, 如果特性发生了改变, 就会回调 BluetoothGattCallback 接口中的 onCharacteristicChanged() 方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line">// 特性通知  </span><br><span class="line">public void onCharacteristicChanged(BluetoothGatt gatt,  </span><br><span class="line">        BluetoothGattCharacteristic characteristic) &#123;  </span><br><span class="line">    broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭APP中的BLE连接"><a href="#关闭APP中的BLE连接" class="headerlink" title="关闭APP中的BLE连接"></a>关闭APP中的BLE连接</h4><p>一旦结束了 BLE 设备的使用, 调用 BluetoothGatt 的 close() 方法, 关闭 BLE 连接, 释放相关的资源.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void close() &#123;  </span><br><span class="line">    if (mBluetoothGatt == null) &#123;  </span><br><span class="line">        return;  </span><br><span class="line">    &#125;  </span><br><span class="line">    mBluetoothGatt.close();  </span><br><span class="line">    mBluetoothGatt = null;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整项目链接，访问我的<a href="https://gitee.com/hejinjin/DoorDu" target="_blank" rel="noopener">开源中国</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android BLE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MarkDown使用规范</title>
      <link href="/2018/02/24/markdown%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
      <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h6><ul><li>列表1</li><li>列表2</li><li>列表3</li></ul><h6 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h6><ol><li>列表1</li><li>列表2</li><li>列表3</li></ol><h6 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h6><p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p><h6 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h6><p><img src="http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image-w100"></p><h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><blockquote><p>一个人，一棵树，一壶酒</p></blockquote><h6 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h6><p><em>斜体</em><br><strong>粗体</strong></p><h6 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h6><p><code>单行引用</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多行引用</span><br><span class="line">多行引用</span><br><span class="line">多行引用</span><br></pre></td></tr></table></figure></p><h6 id="表格-第二行为关键代码"><a href="#表格-第二行为关键代码" class="headerlink" title="表格(第二行为关键代码)"></a>表格(第二行为关键代码)</h6><table><thead><tr><th style="text-align:center">Table</th><th style="text-align:center">Are</th><th style="text-align:center">Cool</th></tr></thead><tbody><tr><td style="text-align:center">col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:center">$1600</td></tr><tr><td style="text-align:center">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:center">$12</td></tr><tr><td style="text-align:center">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:center">$1</td></tr></tbody></table><table><thead><tr><th style="text-align:center">dog</th><th>bird</th><th>cat</th></tr></thead><tbody><tr><td style="text-align:center">foo</td><td>foo</td><td>foo</td></tr><tr><td style="text-align:center">bar</td><td>bar</td><td>bar</td></tr><tr><td style="text-align:center">baz</td><td>baz</td><td>baz</td></tr></tbody></table><h6 id="显示链接中带括号的图片-中间要空一行"><a href="#显示链接中带括号的图片-中间要空一行" class="headerlink" title="显示链接中带括号的图片(中间要空一行)"></a>显示链接中带括号的图片(中间要空一行)</h6><p><img src="http://latex.codecogs.com/gif.latex?\prod%20\(n_{i}\)+1" alt="第一张图片"></p><p>+++　朱丽叶与罗密欧</p>]]></content>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 使用规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 使用命令</title>
      <link href="/2018/01/24/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>About me</title>
      <link href="/about/index.html"/>
      <content type="html"><![CDATA[<h1 id="1根香烟"><a href="#1根香烟" class="headerlink" title="1根香烟"></a>1根香烟</h1><h1 id="2台电脑"><a href="#2台电脑" class="headerlink" title="2台电脑"></a>2台电脑</h1><h1 id="3顿餐饭"><a href="#3顿餐饭" class="headerlink" title="3顿餐饭"></a>3顿餐饭</h1><h1 id="4房无厅"><a href="#4房无厅" class="headerlink" title="4房无厅"></a>4房无厅</h1><h1 id="5光是色"><a href="#5光是色" class="headerlink" title="5光是色"></a>5光是色</h1><h1 id="6主无神"><a href="#6主无神" class="headerlink" title="6主无神"></a>6主无神</h1><h1 id="7点醒来"><a href="#7点醒来" class="headerlink" title="7点醒来"></a>7点醒来</h1><h1 id="8点洗漱"><a href="#8点洗漱" class="headerlink" title="8点洗漱"></a>8点洗漱</h1><h1 id="9点上班"><a href="#9点上班" class="headerlink" title="9点上班"></a>9点上班</h1><h1 id="10分不爽"><a href="#10分不爽" class="headerlink" title="10分不爽"></a>10分不爽</h1>]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>使用过的标签</title>
      <link href="/tags/index.html"/>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
